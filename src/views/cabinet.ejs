<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link href="../public/css/tailwind-output.css" rel="stylesheet" />
  </head>
  <body class="container mx-auto p-3">
    <div class="p-4"><%- include('../components/navbar'); %></div>
    <div class="flex flex-col md:flex-row">
      <div class="mx-auto px-4 w-full md:w-[40%]">
        <div class="flex flex-row justify-between">
          <div class="flex flex-row w-full justify-between gap-2">
            <div class="w-full">
              <select
                id="willayaSelect"
                class="bg-gray-50 border border-[#47C3A4] text-gray-900 text-sm rounded-lg focus:ring-[#47C3A4] focus:border-[#47C3A4] block w-full p-2.5"
              >
                <option value="" disabled selected>Select Willaya</option>
                <option value="HODH_CHARGUI">Hodh Chargui</option>
                <option value="HODH_EL_GHARBI">Hodh El Gharbi</option>
                <option value="ASSABA">Assaba</option>
                <option value="GORGOL">Gorgol</option>
                <option value="BRAKNA">Brakna</option>
                <option value="TRARZA">Trarza</option>
                <option value="ADRAR">Adrar</option>
                <option value="DAKHLET_NOUADHIBOU">Dakhlet Nouadhibou</option>
                <option value="TAGANT">Tagant</option>
                <option value="GUIDIMAGHA">Guidimagha</option>
                <option value="TIRIS_ZEMMOUR">Tiris Zemmour</option>
                <option value="INCHIRI">Inchiri</option>
                <option value="NOUAKCHOTT_OUEST">Nouakchott Ouest</option>
                <option value="NOUAKCHOTT_NORD">Nouakchott Nord</option>
                <option value="NOUAKCHOTT_SUD">Nouakchott Sud</option>
              </select>
            </div>
            <div class="w-full">
              <select
                id="moughataaSelect"
                class="bg-gray-50 border border-[#47C3A4] text-gray-900 text-sm rounded-lg focus:ring-[#47C3A4] focus:border-[#47C3A4] block w-full p-2.5"
              >
                <option value="" disabled selected>Select Moughataa</option>
                <option value="NEMA">Nema</option>
                <option value="AMOURJ">Amourj</option>
                <option value="BASSIKNOU">Bassiknou</option>
                <option value="DJIGUENNI">Djiguenni</option>
                <option value="TIMBEDRA">Timbedra</option>
                <option value="OUALATA">Oualata</option>
                <option value="NBEIKET_LAHWACH">Nbeiket Lahwach</option>
                <option value="ADELBEGROU">Adelbegrou</option>
                <option value="AIOUN">Aïoun</option>
                <option value="TAMCHEKET">Tamcheket</option>
                <option value="KOUBENNI">Koubenni</option>
                <option value="TINTANE">Tintane</option>
                <option value="TOUIL">Touil</option>
                <option value="KIFFA">Kiffa</option>
                <option value="KANKOUSSA">Kankoussa</option>
                <option value="BOUMDEID">Boumdeid</option>
                <option value="GUEROU">Guerou</option>
                <option value="BARKEOL">Barkéol</option>
                <option value="KAEDI">Kaédi</option>
                <option value="MONGUEL">Monguel</option>
                <option value="MAGHAMA">Maghama</option>
                <option value="MBOUT">M'Bout</option>
                <option value="LEXEIBA1">Lexeiba1</option>
                <option value="ALEG">Aleg</option>
                <option value="BABABE">Bababé</option>
                <option value="MBAGNE">M'Bagne</option>
                <option value="MAGTALAHJAR">Magtalahjar</option>
                <option value="BOGHE">Boghé</option>
                <option value="MALE">Male</option>
                <option value="ROSSO">Rosso</option>
                <option value="OUAD_NAGA">Ouad Naga</option>
                <option value="KEUR_MACENE">Keur Macène</option>
                <option value="RKIZ">R'Kiz</option>
                <option value="BOUTILIMIT">Boutilimit</option>
                <option value="MEDERDRA">Mederdra</option>
                <option value="TEKANE">Tekane</option>
                <option value="ATAR">Atar</option>
                <option value="AUOJEFT">Aoujeft</option>
                <option value="OUADANE">Ouadane</option>
                <option value="CHINGUITTI">Chinguitti</option>
                <option value="NOUADHIBOU">Nouadhibou</option>
                <option value="CHAMI">Chami</option>
                <option value="TIDJIKJA">Tidjikja</option>
                <option value="MOUDJERIA">Moudjeria</option>
                <option value="TICHIT">Tichit</option>
                <option value="SELIBABY">Sélibaby</option>
                <option value="OULD_YENGE">Ould Yengé</option>
                <option value="GHABOU">Ghabou</option>
                <option value="WOMPOU">Wompou</option>
                <option value="ZOUERATT">Zoueratt</option>
                <option value="FDEIRICK">F'Deirick</option>
                <option value="BIR_MOGHREIN">Bir Moghrein</option>
                <option value="AKJOUJT">Akjoujt</option>
                <option value="BENNECHAB">Bennechab</option>
                <option value="TEVRAGH_ZEINA">Tevragh Zeina</option>
                <option value="SEBKHA">Sebkha</option>
                <option value="KSAR">Ksar</option>
                <option value="DAR_NAIM">Dar Naïm</option>
                <option value="TOUJOUNINE">Toujounine</option>
                <option value="TEYARET">Teyaret</option>
                <option value="ARAFAT">Arafat</option>
                <option value="EL_MINA">El Mina</option>
                <option value="RIYAD">Riyad</option>
              </select>
            </div>
          </div>
          <div></div>
        </div>
        <ul class="mt-12 divide-y" id="cabinetList"></ul>

        <div class="flex flex-col items-center">
          <!-- Help text -->
          <span class="text-sm text-gray-700" id="pageCounter"> </span>
          <div class="inline-flex mt-2 xs:mt-0 justify-between gap-2">
            <!-- Buttons -->
            <button
              id="prevBtn"
              class="flex items-center justify-center border border-[#47C3A4] px-3 h-8 text-sm font-medium text-gray-700 rounded-s hover:bg-[#47C3A4]"
            >
              <svg
                class="w-3.5 h-3.5 me-2 rtl:rotate-180"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 14 10"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13 5H1m0 0 4 4M1 5l4-4"
                />
              </svg>
              Prev
            </button>
            <button
              id="nextBtn"
              class="flex items-center justify-center border border-[#47C3A4] px-3 h-8 text-sm font-medium text-gray-700 rounded-s hover:bg-[#47C3A4]"
            >
              Next
              <svg
                class="w-3.5 h-3.5 ms-2 rtl:rotate-180"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 14 10"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M1 5h12m0 0L9 1m4 4L9 9"
                />
              </svg>
            </button>
          </div>
        </div>
      </div>
      <div class="w-full md:w-[60%] h-[400px] md:h-[90vh]">
        <div class="relative w-full h-full">
          <div id="map" class="absolute top-0 left-0 w-full h-full"></div>
        </div>
      </div>
    </div>

    <script>
      var map;
      var markers = [];
      var polylines = [];
      var directionsService;
      var directionsRenderer;
      var cabinets = [];
      var currentPage = 1;
      var cabinetsPerPage = 5;

      async function fetchCabinets() {
        try {
          const response = await fetch(
            "http://localhost:8080/api/health/cabinets"
          );
          if (!response.ok) {
            throw new Error(
              "Network response was not ok " + response.statusText
            );
          }
          cabinets = await response.json();
          console.log("Cabinets fetched from API:", cabinets);
          return cabinets;
        } catch (error) {
          console.error("There was a problem with the fetch operation:", error);
        }
      }

      function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
        const R = 6371;
        const dLat = deg2rad(lat2 - lat1);
        const dLon = deg2rad(lon2 - lon1);
        const a =
          Math.sin(dLat / 2) * Math.sin(dLat / 2) +
          Math.cos(deg2rad(lat1)) *
            Math.cos(deg2rad(lat2)) *
            Math.sin(dLon / 2) *
            Math.sin(dLon / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        const d = R * c;
        return d;
      }

      function deg2rad(deg) {
        return deg * (Math.PI / 180);
      }

      async function initMap() {
        var location = { lat: 18.089568255185064, lng: -15.984527865438487 };

        map = new google.maps.Map(document.getElementById("map"), {
          zoom: 12,
          center: location,
        });

        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer();
        directionsRenderer.setMap(map);

        const cabinets = await fetchCabinets();
        if (cabinets) {
          displayCabinets(cabinets);
          drawWillayaLines(cabinets);
        }

        document
          .getElementById("willayaSelect")
          .addEventListener("change", filterCabinets);
        document
          .getElementById("moughataaSelect")
          .addEventListener("change", filterCabinets);
        document
          .getElementById("prevBtn")
          .addEventListener("click", showPreviousPage);
        document
          .getElementById("nextBtn")
          .addEventListener("click", showNextPage);
      }

      function drawWillayaLines(cabinets) {
        clearPolylines();
        const willayaGroups = cabinets.reduce((acc, cabinet) => {
          if (!acc[cabinet.willaya]) {
            acc[cabinet.willaya] = [];
          }
          acc[cabinet.willaya].push(cabinet);
          return acc;
        }, {});

        const colors = {
          "Nouakchott-Nord": "#FF0000",
          "Nouakchott-Ouest": "#00FF00",
          "Nouakchott-Sud": "#0000FF",
        };

        Object.keys(willayaGroups).forEach((willaya) => {
          const lineCoordinates = willayaGroups[willaya].map((cabinet) => ({
            lat: cabinet.latitude,
            lng: cabinet.longitude,
          }));
          const polyline = new google.maps.Polyline({
            path: lineCoordinates,
            geodesic: true,
            strokeColor: colors[willaya],
            strokeOpacity: 1.0,
            strokeWeight: 2,
          });
          polyline.setMap(map);
          polylines.push(polyline);
        });
      }

      function clearPolylines() {
        polylines.forEach((polyline) => polyline.setMap(null));
        polylines = [];
      }

      function displayCabinets(cabinets) {
        console.log("Displaying cabinets:", cabinets);

        markers.forEach((marker) => marker.setMap(null));
        markers = [];
        clearPolylines(); // Clear the polylines before drawing new ones

        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const userLat = position.coords.latitude;
              const userLng = position.coords.longitude;

              const cabinetDistances = cabinets.map((cabinet) => {
                const distance = getDistanceFromLatLonInKm(
                  userLat,
                  userLng,
                  cabinet.latitude,
                  cabinet.longitude
                );
                return { ...cabinet, distance };
              });

              cabinetDistances.sort((a, b) => a.distance - b.distance);

              const cabinetList = document.getElementById("cabinetList");
              cabinetList.innerHTML = "";

              const paginatedCabinets = paginate(
                cabinetDistances,
                currentPage,
                cabinetsPerPage
              );

              paginatedCabinets.forEach((cabinet, index) => {
                const li = document.createElement("li");
                li.classList.add(
                  "py-5",
                  "flex",
                  "items-start",
                  "justify-between"
                );
                li.innerHTML = `
                <div class="flex gap-3">
                  <img src="../public/assets/Logos/cabi.jpg" class="flex-none w-16 h-16" />
                  <div>
                    <span class="block text-sm text-gray-700 font-semibold">${
                      cabinet.nom
                    }</span>
                    <span class="block text-sm text-gray-600">${cabinet.distance.toFixed(
                      2
                    )} km</span>
                    <span class="block text-sm text-gray-600"> ${
                      cabinet.willaya
                    }-${cabinet.moughataa}</span>
                  </div>
                </div>
                <a
                   href="https://www.google.com/maps/dir/?api=1&destination=${
                     cabinet.latitude
                   },${cabinet.longitude}"
                   target="_blank"
                  class="text-gray-700 text-sm border border-[#47C3A4] rounded-lg px-3 py-2 duration-150 bg-white hover:bg-[#47C3A4] flex items-center gap-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.447-.894L15 4"
                    />
                  </svg>
                  View in map
                </a>`;
                cabinetList.appendChild(li);

                const marker = new google.maps.Marker({
                  position: { lat: cabinet.latitude, lng: cabinet.longitude },
                  map: map,
                  title: cabinet.nom,
                });

                const infoWindow = new google.maps.InfoWindow({
                  content: `
                  <div>
                    <h2>${cabinet.nom}</h2>
                    <p>Willaya: ${cabinet.willaya}</p>
                    <p>Moughataa: ${cabinet.moughataa}</p>
                   <a href="https://www.google.com/maps/dir/?api=1&destination=${cabinet.latitude},${cabinet.longitude}" target="_blank">View in Maps</a>
                  </div>
                `,
                });

                marker.addListener("click", () => {
                  infoWindow.open(map, marker);
                });

                markers.push(marker);
              });

              updatePaginationButtons(cabinetDistances.length);
              drawWillayaLines(paginatedCabinets);
            },
            (error) => {
              console.error("Error getting user location:", error);
            }
          );
        } else {
          console.error("Geolocation is not supported by this browser.");
        }
      }

      function paginate(items, currentPage, itemsPerPage) {
        const start = (currentPage - 1) * itemsPerPage;
        const end = start + itemsPerPage;
        return items.slice(start, end);
      }

      function updatePaginationButtons(totalItems) {
        const totalPages = Math.ceil(totalItems / cabinetsPerPage);
        const pageCounter = document.getElementById("pageCounter");
        pageCounter.innerHTML = `
            Affichage de 
            <span class="font-semibold text-gray-900">1</span>
            à
            <span class="font-semibold text-gray-900 ">10</span>
            sur
            <span class="font-semibold text-gray-900">${totalPages}</span>
            Entrées`;
        document.getElementById("prevBtn").disabled = currentPage === 1;
        document.getElementById("nextBtn").disabled =
          currentPage === totalPages;
      }

      function showPreviousPage() {
        if (currentPage > 1) {
          currentPage--;
          filterCabinets();
        }
      }

      function showNextPage() {
        currentPage++;
        filterCabinets();
      }

      function filterCabinets() {
        const willaya = document.getElementById("willayaSelect").value;
        const moughataa = document.getElementById("moughataaSelect").value;

        const filteredCabinets = cabinets.filter((cabinet) => {
          return (
            (willaya === "Choisissez une willaya" ||
              cabinet.willaya === willaya) &&
            (moughataa === "Choisissez une moughataa" ||
              cabinet.moughataa === moughataa)
          );
        });

        displayCabinets(filteredCabinets);
      }

      function getDirections(lat, lng) {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const userLat = position.coords.latitude;
              const userLng = position.coords.longitude;
              const request = {
                origin: { lat: userLat, lng: userLng },
                destination: { lat: lat, lng: lng },
                travelMode: google.maps.TravelMode.DRIVING,
              };
              directionsService.route(request, (result, status) => {
                if (status == google.maps.DirectionsStatus.OK) {
                  directionsRenderer.setDirections(result);
                  map.setZoom(15);
                } else {
                  console.error("Directions request failed due to " + status);
                }
              });
            },
            (error) => {
              console.error("Error getting user location:", error);
            }
          );
        }
      }
    </script>
    <script
      async
      defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC7iU-ErVpTKuucu5uUi59Nqp0w7WNO4eA&libraries=places&callback=initMap"
    ></script>
  </body>
</html>
